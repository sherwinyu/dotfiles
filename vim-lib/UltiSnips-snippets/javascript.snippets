snippet l "console.log"
console.log(${1:'$2'});
endsnippet

snippet s1l "console.log"
console.log(${1:'$2'});
endsnippet

snippet => "javascript function inline"
($1) => $0
endsnippet


snippet =>{ "javascript function body"
($1) => {
  $2
$0
endsnippet


snippet rie! "React If Else"
{(() => {
  if ($1) {
    return (
      $2
    );
  } else {
    return (
      $3
    );
  }
})()}
endsnippet

snippet r?! "React Ternary"
{
  ${1:conditional}
  ? ${2:true_expression}
  : ${3:false_expression}
}
endsnippet

snippet r&& "React and-block"
{${1:conditional} && (
  <${2:component}>$0
)}
endsnippet



snippet describe "describe block ('...', () => {  })"
describe('$1', () => {
  $2
});
$0
endsnippet



snippet it "it"
it('${1:It}', () => {
  $2
});
$0
endsnippet


snippet ex "expect(...)."
expect($1).${2:ok()};$3
endsnippet



snippet beforeEach "beforeEach"
beforeEach(() => {
  $0
});
endsnippet



snippet afterEach "afterEach"
afterEach(() => {
  $0
});
endsnippet



snippet before "before"
before(() => {
  $0
});
endsnippet



snippet after "after"
after(() => {
  $0
});
endsnippet









snippet reactTest "React Test snippet"
/* eslint-env mocha */
import {expect} from 'chai';
import {mount} from 'enzyme';
import React from 'react';
import sinon from 'sinon';

import $1 from '/$1';


const TEST_PROPS = {
  prop1: {
    prop2: [{name: 'col1', value: 'val1'}, {name: 'col2', value: 'val2'}, {name: 'col4', val: 'val4'}],
  },
};


describe('${1:MyComponent}', () => {
  const sandbox = sinon.sandbox.create();

  afterEach(() => {
    sandbox.restore();
  });

  it('renders a <button> if props.compact', () => {
    const ${2:myComponent} = mount(<$1 {...TEST_PROPS} propOverride={true} />);
    expect($2.find('button')).present();
  });

  it('renders a <a> if props.compact', () => {
    const $2 = mount(<$1 {...TEST_PROPS} propOveride={false} />);
    expect($2.find('a')).present();
  });

  it('renders a tooltip', () => {
    const $2 = mount(<$1 {...TEST_PROPS} compact={true} />);
    expect($2.find(Tooltip)).present();
    expect($2.find(Tooltip).props()).subsetContain({
      title: 'Create Project',
    });
    expect($2.find(''));
  });

  it('does something with a simulate', () => {
    const stubCreateSourceModalOpen = sandbox.stub(CreateSourceModal, 'open');
    const $2 = mount(<$1 {...TEST_PROPS} compact={true} />);
    $2.find('a').simulate('click');
    expect(stubCreateSourceModalOpen).calledOnce();
  });
});
endsnippet





snippet reactConnectedComponent "React Connected Component Redux"
// @flow
import {connect} from 'react-redux';
import * as React from 'react';
import classNames from 'classnames';

import type {ReduxState} from '../store';
import type {Dispatch} from '../actions/index';

type Props = {
  $2: $3,
}
class _$1 extends React.Component<Props> {
  render() {
    const {$2} = this.props;
    return <div>$1</div>

  }
};

const mapStateToProps = (state: ReduxState) => {
  return {
  };
};

const mapDispatchToProps = (dispatch: Dispatch, ownProps) => {
  return {
  };
};

const $1 = connect(
  mapStateToProps,
  mapDispatchToProps
)(_$1);
export default $1;
endsnippet

snippet connect< "Connect<Props, OwnProps>"
connect<Props, OwnProps, _, _, _, _>${3:($1)($2)}
endsnippet
